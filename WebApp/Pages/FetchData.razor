@page "/fetchdata"
@using System.Text.Json
@using System.Text
@using Data.Models
@inject HttpClient Http
<h3>Create Post</h3>

<EditForm Model="_newPost" OnValidSubmit="CreatePostAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <InputText id="username" @bind-Value="_newPost.Username" placeholder="Username"/>
    <InputText id="type" @bind-Value="_newPost.Type" placeholder="Type"/>
    <button type="submit">Create</button>
</EditForm>

<h3>Posts</h3>
@foreach (var post in _posts)
{
    <h4>@post.Username (@post.Type)</h4>
    <button @onclick="() => LoadPost(post.PostId)">Edit</button>
    <button @onclick="() => DeletePost(post.PostId)">Delete</button>
}

@if (_editPost != null)
{
    <h3>Edit Post</h3>
    <EditForm Model="_editPost" OnValidSubmit="UpdatePost">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <InputText id="username" @bind-Value="_editPost.Username" placeholder="Username"/>
        <InputText id="type" @bind-Value="_editPost.Type" placeholder="Type"/>
        <button type="submit">Update</button>
    </EditForm>
}

@code {
    private List<Post> _posts = new();
    private Post _newPost = new();
    private Post? _editPost;

        private const string apiUrl = "https://blogfunctionsjfgc.azurewebsites.net/api";

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        _posts = await Http.GetFromJsonAsync<List<Post>>(apiUrl + "/getallposts");
    }

    private async Task LoadPost(Guid id)
    {
        _editPost = await Http.GetFromJsonAsync<Post>(apiUrl + $"/getpost/{id}");
    }

    private async Task CreatePostAsync()
    {
        var postContent = new StringContent(JsonSerializer.Serialize(_newPost), Encoding.UTF8, "application/json");

        var response = await Http.PostAsync(apiUrl + "/createpost", postContent);
        if (response.IsSuccessStatusCode)
        {
            _newPost = new Post();
            await LoadPosts();
        }
        else
        {
    // Handle failure
        }
    }

    private async Task UpdatePost()
    {
        var postContent = new StringContent(JsonSerializer.Serialize(_editPost), Encoding.UTF8, "application/json");

        var response = await Http.PutAsync(apiUrl + $"/updatepost/{_editPost.PostId}", postContent);
        if (response.IsSuccessStatusCode)
        {
            _editPost = null;
            await LoadPosts();
        }
        else
        {
    // Handle failure
        }
    }

    private async Task DeletePost(Guid id)
    {
        var response = await Http.DeleteAsync(apiUrl + $"/deletepost/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadPosts();
        }
        else
        {
    // Handle failure
        }
    }

}